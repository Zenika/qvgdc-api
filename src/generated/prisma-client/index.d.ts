// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  answer: (where?: AnswerWhereInput) => Promise<boolean>;
  choice: (where?: ChoiceWhereInput) => Promise<boolean>;
  game: (where?: GameWhereInput) => Promise<boolean>;
  player: (where?: PlayerWhereInput) => Promise<boolean>;
  question: (where?: QuestionWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  answer: (where: AnswerWhereUniqueInput) => AnswerNullablePromise;
  answers: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Answer>;
  answersConnection: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AnswerConnectionPromise;
  choice: (where: ChoiceWhereUniqueInput) => ChoiceNullablePromise;
  choices: (args?: {
    where?: ChoiceWhereInput;
    orderBy?: ChoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Choice>;
  choicesConnection: (args?: {
    where?: ChoiceWhereInput;
    orderBy?: ChoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChoiceConnectionPromise;
  game: (where: GameWhereUniqueInput) => GameNullablePromise;
  games: (args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Game>;
  gamesConnection: (args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GameConnectionPromise;
  player: (where: PlayerWhereUniqueInput) => PlayerNullablePromise;
  players: (args?: {
    where?: PlayerWhereInput;
    orderBy?: PlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Player>;
  playersConnection: (args?: {
    where?: PlayerWhereInput;
    orderBy?: PlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PlayerConnectionPromise;
  question: (where: QuestionWhereUniqueInput) => QuestionNullablePromise;
  questions: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Question>;
  questionsConnection: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuestionConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAnswer: (data: AnswerCreateInput) => AnswerPromise;
  updateAnswer: (args: {
    data: AnswerUpdateInput;
    where: AnswerWhereUniqueInput;
  }) => AnswerPromise;
  upsertAnswer: (args: {
    where: AnswerWhereUniqueInput;
    create: AnswerCreateInput;
    update: AnswerUpdateInput;
  }) => AnswerPromise;
  deleteAnswer: (where: AnswerWhereUniqueInput) => AnswerPromise;
  deleteManyAnswers: (where?: AnswerWhereInput) => BatchPayloadPromise;
  createChoice: (data: ChoiceCreateInput) => ChoicePromise;
  updateChoice: (args: {
    data: ChoiceUpdateInput;
    where: ChoiceWhereUniqueInput;
  }) => ChoicePromise;
  updateManyChoices: (args: {
    data: ChoiceUpdateManyMutationInput;
    where?: ChoiceWhereInput;
  }) => BatchPayloadPromise;
  upsertChoice: (args: {
    where: ChoiceWhereUniqueInput;
    create: ChoiceCreateInput;
    update: ChoiceUpdateInput;
  }) => ChoicePromise;
  deleteChoice: (where: ChoiceWhereUniqueInput) => ChoicePromise;
  deleteManyChoices: (where?: ChoiceWhereInput) => BatchPayloadPromise;
  createGame: (data: GameCreateInput) => GamePromise;
  updateGame: (args: {
    data: GameUpdateInput;
    where: GameWhereUniqueInput;
  }) => GamePromise;
  updateManyGames: (args: {
    data: GameUpdateManyMutationInput;
    where?: GameWhereInput;
  }) => BatchPayloadPromise;
  upsertGame: (args: {
    where: GameWhereUniqueInput;
    create: GameCreateInput;
    update: GameUpdateInput;
  }) => GamePromise;
  deleteGame: (where: GameWhereUniqueInput) => GamePromise;
  deleteManyGames: (where?: GameWhereInput) => BatchPayloadPromise;
  createPlayer: (data: PlayerCreateInput) => PlayerPromise;
  updatePlayer: (args: {
    data: PlayerUpdateInput;
    where: PlayerWhereUniqueInput;
  }) => PlayerPromise;
  updateManyPlayers: (args: {
    data: PlayerUpdateManyMutationInput;
    where?: PlayerWhereInput;
  }) => BatchPayloadPromise;
  upsertPlayer: (args: {
    where: PlayerWhereUniqueInput;
    create: PlayerCreateInput;
    update: PlayerUpdateInput;
  }) => PlayerPromise;
  deletePlayer: (where: PlayerWhereUniqueInput) => PlayerPromise;
  deleteManyPlayers: (where?: PlayerWhereInput) => BatchPayloadPromise;
  createQuestion: (data: QuestionCreateInput) => QuestionPromise;
  updateQuestion: (args: {
    data: QuestionUpdateInput;
    where: QuestionWhereUniqueInput;
  }) => QuestionPromise;
  updateManyQuestions: (args: {
    data: QuestionUpdateManyMutationInput;
    where?: QuestionWhereInput;
  }) => BatchPayloadPromise;
  upsertQuestion: (args: {
    where: QuestionWhereUniqueInput;
    create: QuestionCreateInput;
    update: QuestionUpdateInput;
  }) => QuestionPromise;
  deleteQuestion: (where: QuestionWhereUniqueInput) => QuestionPromise;
  deleteManyQuestions: (where?: QuestionWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  answer: (
    where?: AnswerSubscriptionWhereInput
  ) => AnswerSubscriptionPayloadSubscription;
  choice: (
    where?: ChoiceSubscriptionWhereInput
  ) => ChoiceSubscriptionPayloadSubscription;
  game: (
    where?: GameSubscriptionWhereInput
  ) => GameSubscriptionPayloadSubscription;
  player: (
    where?: PlayerSubscriptionWhereInput
  ) => PlayerSubscriptionPayloadSubscription;
  question: (
    where?: QuestionSubscriptionWhereInput
  ) => QuestionSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ChoiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC";

export type AnswerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type GameOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "open_ASC"
  | "open_DESC"
  | "finish_ASC"
  | "finish_DESC"
  | "state_ASC"
  | "state_DESC";

export type PlayerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "score_ASC"
  | "score_DESC"
  | "responseTime_ASC"
  | "responseTime_DESC";

export type QuestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "title_ASC"
  | "title_DESC"
  | "order_ASC"
  | "order_DESC"
  | "launched_ASC"
  | "launched_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AnswerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChoiceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  question?: Maybe<QuestionWhereInput>;
  answers_every?: Maybe<AnswerWhereInput>;
  answers_some?: Maybe<AnswerWhereInput>;
  answers_none?: Maybe<AnswerWhereInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<ChoiceWhereInput[] | ChoiceWhereInput>;
  OR?: Maybe<ChoiceWhereInput[] | ChoiceWhereInput>;
  NOT?: Maybe<ChoiceWhereInput[] | ChoiceWhereInput>;
}

export interface QuestionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  duration?: Maybe<Int>;
  duration_not?: Maybe<Int>;
  duration_in?: Maybe<Int[] | Int>;
  duration_not_in?: Maybe<Int[] | Int>;
  duration_lt?: Maybe<Int>;
  duration_lte?: Maybe<Int>;
  duration_gt?: Maybe<Int>;
  duration_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  choices_every?: Maybe<ChoiceWhereInput>;
  choices_some?: Maybe<ChoiceWhereInput>;
  choices_none?: Maybe<ChoiceWhereInput>;
  goodChoice?: Maybe<ChoiceWhereInput>;
  answers_every?: Maybe<AnswerWhereInput>;
  answers_some?: Maybe<AnswerWhereInput>;
  answers_none?: Maybe<AnswerWhereInput>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  user?: Maybe<UserWhereInput>;
  game?: Maybe<GameWhereInput>;
  launched?: Maybe<DateTimeInput>;
  launched_not?: Maybe<DateTimeInput>;
  launched_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  launched_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  launched_lt?: Maybe<DateTimeInput>;
  launched_lte?: Maybe<DateTimeInput>;
  launched_gt?: Maybe<DateTimeInput>;
  launched_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
  OR?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
  NOT?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
}

export interface AnswerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  choice?: Maybe<ChoiceWhereInput>;
  player?: Maybe<PlayerWhereInput>;
  question?: Maybe<QuestionWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
  OR?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
  NOT?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
}

export interface PlayerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  game?: Maybe<GameWhereInput>;
  score?: Maybe<Int>;
  score_not?: Maybe<Int>;
  score_in?: Maybe<Int[] | Int>;
  score_not_in?: Maybe<Int[] | Int>;
  score_lt?: Maybe<Int>;
  score_lte?: Maybe<Int>;
  score_gt?: Maybe<Int>;
  score_gte?: Maybe<Int>;
  responseTime?: Maybe<Int>;
  responseTime_not?: Maybe<Int>;
  responseTime_in?: Maybe<Int[] | Int>;
  responseTime_not_in?: Maybe<Int[] | Int>;
  responseTime_lt?: Maybe<Int>;
  responseTime_lte?: Maybe<Int>;
  responseTime_gt?: Maybe<Int>;
  responseTime_gte?: Maybe<Int>;
  answers_every?: Maybe<AnswerWhereInput>;
  answers_some?: Maybe<AnswerWhereInput>;
  answers_none?: Maybe<AnswerWhereInput>;
  AND?: Maybe<PlayerWhereInput[] | PlayerWhereInput>;
  OR?: Maybe<PlayerWhereInput[] | PlayerWhereInput>;
  NOT?: Maybe<PlayerWhereInput[] | PlayerWhereInput>;
}

export interface GameWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  open?: Maybe<Boolean>;
  open_not?: Maybe<Boolean>;
  finish?: Maybe<Boolean>;
  finish_not?: Maybe<Boolean>;
  state?: Maybe<Int>;
  state_not?: Maybe<Int>;
  state_in?: Maybe<Int[] | Int>;
  state_not_in?: Maybe<Int[] | Int>;
  state_lt?: Maybe<Int>;
  state_lte?: Maybe<Int>;
  state_gt?: Maybe<Int>;
  state_gte?: Maybe<Int>;
  players_every?: Maybe<PlayerWhereInput>;
  players_some?: Maybe<PlayerWhereInput>;
  players_none?: Maybe<PlayerWhereInput>;
  questions_every?: Maybe<QuestionWhereInput>;
  questions_some?: Maybe<QuestionWhereInput>;
  questions_none?: Maybe<QuestionWhereInput>;
  currentQuestion?: Maybe<QuestionWhereInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<GameWhereInput[] | GameWhereInput>;
  OR?: Maybe<GameWhereInput[] | GameWhereInput>;
  NOT?: Maybe<GameWhereInput[] | GameWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  games_every?: Maybe<GameWhereInput>;
  games_some?: Maybe<GameWhereInput>;
  games_none?: Maybe<GameWhereInput>;
  choices_every?: Maybe<ChoiceWhereInput>;
  choices_some?: Maybe<ChoiceWhereInput>;
  choices_none?: Maybe<ChoiceWhereInput>;
  questions_every?: Maybe<QuestionWhereInput>;
  questions_some?: Maybe<QuestionWhereInput>;
  questions_none?: Maybe<QuestionWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type ChoiceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type GameWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PlayerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type QuestionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface AnswerCreateInput {
  id?: Maybe<ID_Input>;
  choice: ChoiceCreateOneWithoutAnswersInput;
  player: PlayerCreateOneWithoutAnswersInput;
  question: QuestionCreateOneWithoutAnswersInput;
}

export interface ChoiceCreateOneWithoutAnswersInput {
  create?: Maybe<ChoiceCreateWithoutAnswersInput>;
  connect?: Maybe<ChoiceWhereUniqueInput>;
}

export interface ChoiceCreateWithoutAnswersInput {
  id?: Maybe<ID_Input>;
  title: String;
  question: QuestionCreateOneWithoutChoicesInput;
  user: UserCreateOneWithoutChoicesInput;
}

export interface QuestionCreateOneWithoutChoicesInput {
  create?: Maybe<QuestionCreateWithoutChoicesInput>;
  connect?: Maybe<QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutChoicesInput {
  id?: Maybe<ID_Input>;
  duration: Int;
  title: String;
  goodChoice?: Maybe<ChoiceCreateOneInput>;
  answers?: Maybe<AnswerCreateManyWithoutQuestionInput>;
  order: Int;
  user: UserCreateOneWithoutQuestionsInput;
  game: GameCreateOneWithoutQuestionsInput;
  launched?: Maybe<DateTimeInput>;
}

export interface ChoiceCreateOneInput {
  create?: Maybe<ChoiceCreateInput>;
  connect?: Maybe<ChoiceWhereUniqueInput>;
}

export interface ChoiceCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  question: QuestionCreateOneWithoutChoicesInput;
  answers?: Maybe<AnswerCreateManyWithoutChoiceInput>;
  user: UserCreateOneWithoutChoicesInput;
}

export interface AnswerCreateManyWithoutChoiceInput {
  create?: Maybe<
    AnswerCreateWithoutChoiceInput[] | AnswerCreateWithoutChoiceInput
  >;
  connect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
}

export interface AnswerCreateWithoutChoiceInput {
  id?: Maybe<ID_Input>;
  player: PlayerCreateOneWithoutAnswersInput;
  question: QuestionCreateOneWithoutAnswersInput;
}

export interface PlayerCreateOneWithoutAnswersInput {
  create?: Maybe<PlayerCreateWithoutAnswersInput>;
  connect?: Maybe<PlayerWhereUniqueInput>;
}

export interface PlayerCreateWithoutAnswersInput {
  id?: Maybe<ID_Input>;
  name: String;
  game: GameCreateOneWithoutPlayersInput;
  score?: Maybe<Int>;
  responseTime?: Maybe<Int>;
}

export interface GameCreateOneWithoutPlayersInput {
  create?: Maybe<GameCreateWithoutPlayersInput>;
  connect?: Maybe<GameWhereUniqueInput>;
}

export interface GameCreateWithoutPlayersInput {
  id?: Maybe<ID_Input>;
  title: String;
  open?: Maybe<Boolean>;
  finish?: Maybe<Boolean>;
  state?: Maybe<Int>;
  questions?: Maybe<QuestionCreateManyWithoutGameInput>;
  currentQuestion?: Maybe<QuestionCreateOneInput>;
  user: UserCreateOneWithoutGamesInput;
}

export interface QuestionCreateManyWithoutGameInput {
  create?: Maybe<
    QuestionCreateWithoutGameInput[] | QuestionCreateWithoutGameInput
  >;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutGameInput {
  id?: Maybe<ID_Input>;
  duration: Int;
  title: String;
  choices?: Maybe<ChoiceCreateManyWithoutQuestionInput>;
  goodChoice?: Maybe<ChoiceCreateOneInput>;
  answers?: Maybe<AnswerCreateManyWithoutQuestionInput>;
  order: Int;
  user: UserCreateOneWithoutQuestionsInput;
  launched?: Maybe<DateTimeInput>;
}

export interface ChoiceCreateManyWithoutQuestionInput {
  create?: Maybe<
    ChoiceCreateWithoutQuestionInput[] | ChoiceCreateWithoutQuestionInput
  >;
  connect?: Maybe<ChoiceWhereUniqueInput[] | ChoiceWhereUniqueInput>;
}

export interface ChoiceCreateWithoutQuestionInput {
  id?: Maybe<ID_Input>;
  title: String;
  answers?: Maybe<AnswerCreateManyWithoutChoiceInput>;
  user: UserCreateOneWithoutChoicesInput;
}

export interface UserCreateOneWithoutChoicesInput {
  create?: Maybe<UserCreateWithoutChoicesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutChoicesInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  games?: Maybe<GameCreateManyWithoutUserInput>;
  questions?: Maybe<QuestionCreateManyWithoutUserInput>;
}

export interface GameCreateManyWithoutUserInput {
  create?: Maybe<GameCreateWithoutUserInput[] | GameCreateWithoutUserInput>;
  connect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
}

export interface GameCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title: String;
  open?: Maybe<Boolean>;
  finish?: Maybe<Boolean>;
  state?: Maybe<Int>;
  players?: Maybe<PlayerCreateManyWithoutGameInput>;
  questions?: Maybe<QuestionCreateManyWithoutGameInput>;
  currentQuestion?: Maybe<QuestionCreateOneInput>;
}

export interface PlayerCreateManyWithoutGameInput {
  create?: Maybe<PlayerCreateWithoutGameInput[] | PlayerCreateWithoutGameInput>;
  connect?: Maybe<PlayerWhereUniqueInput[] | PlayerWhereUniqueInput>;
}

export interface PlayerCreateWithoutGameInput {
  id?: Maybe<ID_Input>;
  name: String;
  score?: Maybe<Int>;
  responseTime?: Maybe<Int>;
  answers?: Maybe<AnswerCreateManyWithoutPlayerInput>;
}

export interface AnswerCreateManyWithoutPlayerInput {
  create?: Maybe<
    AnswerCreateWithoutPlayerInput[] | AnswerCreateWithoutPlayerInput
  >;
  connect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
}

export interface AnswerCreateWithoutPlayerInput {
  id?: Maybe<ID_Input>;
  choice: ChoiceCreateOneWithoutAnswersInput;
  question: QuestionCreateOneWithoutAnswersInput;
}

export interface QuestionCreateOneWithoutAnswersInput {
  create?: Maybe<QuestionCreateWithoutAnswersInput>;
  connect?: Maybe<QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutAnswersInput {
  id?: Maybe<ID_Input>;
  duration: Int;
  title: String;
  choices?: Maybe<ChoiceCreateManyWithoutQuestionInput>;
  goodChoice?: Maybe<ChoiceCreateOneInput>;
  order: Int;
  user: UserCreateOneWithoutQuestionsInput;
  game: GameCreateOneWithoutQuestionsInput;
  launched?: Maybe<DateTimeInput>;
}

export interface UserCreateOneWithoutQuestionsInput {
  create?: Maybe<UserCreateWithoutQuestionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutQuestionsInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  games?: Maybe<GameCreateManyWithoutUserInput>;
  choices?: Maybe<ChoiceCreateManyWithoutUserInput>;
}

export interface ChoiceCreateManyWithoutUserInput {
  create?: Maybe<ChoiceCreateWithoutUserInput[] | ChoiceCreateWithoutUserInput>;
  connect?: Maybe<ChoiceWhereUniqueInput[] | ChoiceWhereUniqueInput>;
}

export interface ChoiceCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title: String;
  question: QuestionCreateOneWithoutChoicesInput;
  answers?: Maybe<AnswerCreateManyWithoutChoiceInput>;
}

export interface GameCreateOneWithoutQuestionsInput {
  create?: Maybe<GameCreateWithoutQuestionsInput>;
  connect?: Maybe<GameWhereUniqueInput>;
}

export interface GameCreateWithoutQuestionsInput {
  id?: Maybe<ID_Input>;
  title: String;
  open?: Maybe<Boolean>;
  finish?: Maybe<Boolean>;
  state?: Maybe<Int>;
  players?: Maybe<PlayerCreateManyWithoutGameInput>;
  currentQuestion?: Maybe<QuestionCreateOneInput>;
  user: UserCreateOneWithoutGamesInput;
}

export interface QuestionCreateOneInput {
  create?: Maybe<QuestionCreateInput>;
  connect?: Maybe<QuestionWhereUniqueInput>;
}

export interface QuestionCreateInput {
  id?: Maybe<ID_Input>;
  duration: Int;
  title: String;
  choices?: Maybe<ChoiceCreateManyWithoutQuestionInput>;
  goodChoice?: Maybe<ChoiceCreateOneInput>;
  answers?: Maybe<AnswerCreateManyWithoutQuestionInput>;
  order: Int;
  user: UserCreateOneWithoutQuestionsInput;
  game: GameCreateOneWithoutQuestionsInput;
  launched?: Maybe<DateTimeInput>;
}

export interface AnswerCreateManyWithoutQuestionInput {
  create?: Maybe<
    AnswerCreateWithoutQuestionInput[] | AnswerCreateWithoutQuestionInput
  >;
  connect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
}

export interface AnswerCreateWithoutQuestionInput {
  id?: Maybe<ID_Input>;
  choice: ChoiceCreateOneWithoutAnswersInput;
  player: PlayerCreateOneWithoutAnswersInput;
}

export interface UserCreateOneWithoutGamesInput {
  create?: Maybe<UserCreateWithoutGamesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutGamesInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  choices?: Maybe<ChoiceCreateManyWithoutUserInput>;
  questions?: Maybe<QuestionCreateManyWithoutUserInput>;
}

export interface QuestionCreateManyWithoutUserInput {
  create?: Maybe<
    QuestionCreateWithoutUserInput[] | QuestionCreateWithoutUserInput
  >;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
}

export interface QuestionCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  duration: Int;
  title: String;
  choices?: Maybe<ChoiceCreateManyWithoutQuestionInput>;
  goodChoice?: Maybe<ChoiceCreateOneInput>;
  answers?: Maybe<AnswerCreateManyWithoutQuestionInput>;
  order: Int;
  game: GameCreateOneWithoutQuestionsInput;
  launched?: Maybe<DateTimeInput>;
}

export interface AnswerUpdateInput {
  choice?: Maybe<ChoiceUpdateOneRequiredWithoutAnswersInput>;
  player?: Maybe<PlayerUpdateOneRequiredWithoutAnswersInput>;
  question?: Maybe<QuestionUpdateOneRequiredWithoutAnswersInput>;
}

export interface ChoiceUpdateOneRequiredWithoutAnswersInput {
  create?: Maybe<ChoiceCreateWithoutAnswersInput>;
  update?: Maybe<ChoiceUpdateWithoutAnswersDataInput>;
  upsert?: Maybe<ChoiceUpsertWithoutAnswersInput>;
  connect?: Maybe<ChoiceWhereUniqueInput>;
}

export interface ChoiceUpdateWithoutAnswersDataInput {
  title?: Maybe<String>;
  question?: Maybe<QuestionUpdateOneRequiredWithoutChoicesInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutChoicesInput>;
}

export interface QuestionUpdateOneRequiredWithoutChoicesInput {
  create?: Maybe<QuestionCreateWithoutChoicesInput>;
  update?: Maybe<QuestionUpdateWithoutChoicesDataInput>;
  upsert?: Maybe<QuestionUpsertWithoutChoicesInput>;
  connect?: Maybe<QuestionWhereUniqueInput>;
}

export interface QuestionUpdateWithoutChoicesDataInput {
  duration?: Maybe<Int>;
  title?: Maybe<String>;
  goodChoice?: Maybe<ChoiceUpdateOneInput>;
  answers?: Maybe<AnswerUpdateManyWithoutQuestionInput>;
  order?: Maybe<Int>;
  user?: Maybe<UserUpdateOneRequiredWithoutQuestionsInput>;
  game?: Maybe<GameUpdateOneRequiredWithoutQuestionsInput>;
  launched?: Maybe<DateTimeInput>;
}

export interface ChoiceUpdateOneInput {
  create?: Maybe<ChoiceCreateInput>;
  update?: Maybe<ChoiceUpdateDataInput>;
  upsert?: Maybe<ChoiceUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ChoiceWhereUniqueInput>;
}

export interface ChoiceUpdateDataInput {
  title?: Maybe<String>;
  question?: Maybe<QuestionUpdateOneRequiredWithoutChoicesInput>;
  answers?: Maybe<AnswerUpdateManyWithoutChoiceInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutChoicesInput>;
}

export interface AnswerUpdateManyWithoutChoiceInput {
  create?: Maybe<
    AnswerCreateWithoutChoiceInput[] | AnswerCreateWithoutChoiceInput
  >;
  delete?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  connect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  set?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  disconnect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  update?: Maybe<
    | AnswerUpdateWithWhereUniqueWithoutChoiceInput[]
    | AnswerUpdateWithWhereUniqueWithoutChoiceInput
  >;
  upsert?: Maybe<
    | AnswerUpsertWithWhereUniqueWithoutChoiceInput[]
    | AnswerUpsertWithWhereUniqueWithoutChoiceInput
  >;
  deleteMany?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
}

export interface AnswerUpdateWithWhereUniqueWithoutChoiceInput {
  where: AnswerWhereUniqueInput;
  data: AnswerUpdateWithoutChoiceDataInput;
}

export interface AnswerUpdateWithoutChoiceDataInput {
  player?: Maybe<PlayerUpdateOneRequiredWithoutAnswersInput>;
  question?: Maybe<QuestionUpdateOneRequiredWithoutAnswersInput>;
}

export interface PlayerUpdateOneRequiredWithoutAnswersInput {
  create?: Maybe<PlayerCreateWithoutAnswersInput>;
  update?: Maybe<PlayerUpdateWithoutAnswersDataInput>;
  upsert?: Maybe<PlayerUpsertWithoutAnswersInput>;
  connect?: Maybe<PlayerWhereUniqueInput>;
}

export interface PlayerUpdateWithoutAnswersDataInput {
  name?: Maybe<String>;
  game?: Maybe<GameUpdateOneRequiredWithoutPlayersInput>;
  score?: Maybe<Int>;
  responseTime?: Maybe<Int>;
}

export interface GameUpdateOneRequiredWithoutPlayersInput {
  create?: Maybe<GameCreateWithoutPlayersInput>;
  update?: Maybe<GameUpdateWithoutPlayersDataInput>;
  upsert?: Maybe<GameUpsertWithoutPlayersInput>;
  connect?: Maybe<GameWhereUniqueInput>;
}

export interface GameUpdateWithoutPlayersDataInput {
  title?: Maybe<String>;
  open?: Maybe<Boolean>;
  finish?: Maybe<Boolean>;
  state?: Maybe<Int>;
  questions?: Maybe<QuestionUpdateManyWithoutGameInput>;
  currentQuestion?: Maybe<QuestionUpdateOneInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutGamesInput>;
}

export interface QuestionUpdateManyWithoutGameInput {
  create?: Maybe<
    QuestionCreateWithoutGameInput[] | QuestionCreateWithoutGameInput
  >;
  delete?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  set?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  disconnect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  update?: Maybe<
    | QuestionUpdateWithWhereUniqueWithoutGameInput[]
    | QuestionUpdateWithWhereUniqueWithoutGameInput
  >;
  upsert?: Maybe<
    | QuestionUpsertWithWhereUniqueWithoutGameInput[]
    | QuestionUpsertWithWhereUniqueWithoutGameInput
  >;
  deleteMany?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  updateMany?: Maybe<
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionUpdateWithWhereUniqueWithoutGameInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateWithoutGameDataInput;
}

export interface QuestionUpdateWithoutGameDataInput {
  duration?: Maybe<Int>;
  title?: Maybe<String>;
  choices?: Maybe<ChoiceUpdateManyWithoutQuestionInput>;
  goodChoice?: Maybe<ChoiceUpdateOneInput>;
  answers?: Maybe<AnswerUpdateManyWithoutQuestionInput>;
  order?: Maybe<Int>;
  user?: Maybe<UserUpdateOneRequiredWithoutQuestionsInput>;
  launched?: Maybe<DateTimeInput>;
}

export interface ChoiceUpdateManyWithoutQuestionInput {
  create?: Maybe<
    ChoiceCreateWithoutQuestionInput[] | ChoiceCreateWithoutQuestionInput
  >;
  delete?: Maybe<ChoiceWhereUniqueInput[] | ChoiceWhereUniqueInput>;
  connect?: Maybe<ChoiceWhereUniqueInput[] | ChoiceWhereUniqueInput>;
  set?: Maybe<ChoiceWhereUniqueInput[] | ChoiceWhereUniqueInput>;
  disconnect?: Maybe<ChoiceWhereUniqueInput[] | ChoiceWhereUniqueInput>;
  update?: Maybe<
    | ChoiceUpdateWithWhereUniqueWithoutQuestionInput[]
    | ChoiceUpdateWithWhereUniqueWithoutQuestionInput
  >;
  upsert?: Maybe<
    | ChoiceUpsertWithWhereUniqueWithoutQuestionInput[]
    | ChoiceUpsertWithWhereUniqueWithoutQuestionInput
  >;
  deleteMany?: Maybe<ChoiceScalarWhereInput[] | ChoiceScalarWhereInput>;
  updateMany?: Maybe<
    | ChoiceUpdateManyWithWhereNestedInput[]
    | ChoiceUpdateManyWithWhereNestedInput
  >;
}

export interface ChoiceUpdateWithWhereUniqueWithoutQuestionInput {
  where: ChoiceWhereUniqueInput;
  data: ChoiceUpdateWithoutQuestionDataInput;
}

export interface ChoiceUpdateWithoutQuestionDataInput {
  title?: Maybe<String>;
  answers?: Maybe<AnswerUpdateManyWithoutChoiceInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutChoicesInput>;
}

export interface UserUpdateOneRequiredWithoutChoicesInput {
  create?: Maybe<UserCreateWithoutChoicesInput>;
  update?: Maybe<UserUpdateWithoutChoicesDataInput>;
  upsert?: Maybe<UserUpsertWithoutChoicesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutChoicesDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  games?: Maybe<GameUpdateManyWithoutUserInput>;
  questions?: Maybe<QuestionUpdateManyWithoutUserInput>;
}

export interface GameUpdateManyWithoutUserInput {
  create?: Maybe<GameCreateWithoutUserInput[] | GameCreateWithoutUserInput>;
  delete?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  connect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  set?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  disconnect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  update?: Maybe<
    | GameUpdateWithWhereUniqueWithoutUserInput[]
    | GameUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | GameUpsertWithWhereUniqueWithoutUserInput[]
    | GameUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  updateMany?: Maybe<
    GameUpdateManyWithWhereNestedInput[] | GameUpdateManyWithWhereNestedInput
  >;
}

export interface GameUpdateWithWhereUniqueWithoutUserInput {
  where: GameWhereUniqueInput;
  data: GameUpdateWithoutUserDataInput;
}

export interface GameUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  open?: Maybe<Boolean>;
  finish?: Maybe<Boolean>;
  state?: Maybe<Int>;
  players?: Maybe<PlayerUpdateManyWithoutGameInput>;
  questions?: Maybe<QuestionUpdateManyWithoutGameInput>;
  currentQuestion?: Maybe<QuestionUpdateOneInput>;
}

export interface PlayerUpdateManyWithoutGameInput {
  create?: Maybe<PlayerCreateWithoutGameInput[] | PlayerCreateWithoutGameInput>;
  delete?: Maybe<PlayerWhereUniqueInput[] | PlayerWhereUniqueInput>;
  connect?: Maybe<PlayerWhereUniqueInput[] | PlayerWhereUniqueInput>;
  set?: Maybe<PlayerWhereUniqueInput[] | PlayerWhereUniqueInput>;
  disconnect?: Maybe<PlayerWhereUniqueInput[] | PlayerWhereUniqueInput>;
  update?: Maybe<
    | PlayerUpdateWithWhereUniqueWithoutGameInput[]
    | PlayerUpdateWithWhereUniqueWithoutGameInput
  >;
  upsert?: Maybe<
    | PlayerUpsertWithWhereUniqueWithoutGameInput[]
    | PlayerUpsertWithWhereUniqueWithoutGameInput
  >;
  deleteMany?: Maybe<PlayerScalarWhereInput[] | PlayerScalarWhereInput>;
  updateMany?: Maybe<
    | PlayerUpdateManyWithWhereNestedInput[]
    | PlayerUpdateManyWithWhereNestedInput
  >;
}

export interface PlayerUpdateWithWhereUniqueWithoutGameInput {
  where: PlayerWhereUniqueInput;
  data: PlayerUpdateWithoutGameDataInput;
}

export interface PlayerUpdateWithoutGameDataInput {
  name?: Maybe<String>;
  score?: Maybe<Int>;
  responseTime?: Maybe<Int>;
  answers?: Maybe<AnswerUpdateManyWithoutPlayerInput>;
}

export interface AnswerUpdateManyWithoutPlayerInput {
  create?: Maybe<
    AnswerCreateWithoutPlayerInput[] | AnswerCreateWithoutPlayerInput
  >;
  delete?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  connect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  set?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  disconnect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  update?: Maybe<
    | AnswerUpdateWithWhereUniqueWithoutPlayerInput[]
    | AnswerUpdateWithWhereUniqueWithoutPlayerInput
  >;
  upsert?: Maybe<
    | AnswerUpsertWithWhereUniqueWithoutPlayerInput[]
    | AnswerUpsertWithWhereUniqueWithoutPlayerInput
  >;
  deleteMany?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
}

export interface AnswerUpdateWithWhereUniqueWithoutPlayerInput {
  where: AnswerWhereUniqueInput;
  data: AnswerUpdateWithoutPlayerDataInput;
}

export interface AnswerUpdateWithoutPlayerDataInput {
  choice?: Maybe<ChoiceUpdateOneRequiredWithoutAnswersInput>;
  question?: Maybe<QuestionUpdateOneRequiredWithoutAnswersInput>;
}

export interface QuestionUpdateOneRequiredWithoutAnswersInput {
  create?: Maybe<QuestionCreateWithoutAnswersInput>;
  update?: Maybe<QuestionUpdateWithoutAnswersDataInput>;
  upsert?: Maybe<QuestionUpsertWithoutAnswersInput>;
  connect?: Maybe<QuestionWhereUniqueInput>;
}

export interface QuestionUpdateWithoutAnswersDataInput {
  duration?: Maybe<Int>;
  title?: Maybe<String>;
  choices?: Maybe<ChoiceUpdateManyWithoutQuestionInput>;
  goodChoice?: Maybe<ChoiceUpdateOneInput>;
  order?: Maybe<Int>;
  user?: Maybe<UserUpdateOneRequiredWithoutQuestionsInput>;
  game?: Maybe<GameUpdateOneRequiredWithoutQuestionsInput>;
  launched?: Maybe<DateTimeInput>;
}

export interface UserUpdateOneRequiredWithoutQuestionsInput {
  create?: Maybe<UserCreateWithoutQuestionsInput>;
  update?: Maybe<UserUpdateWithoutQuestionsDataInput>;
  upsert?: Maybe<UserUpsertWithoutQuestionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutQuestionsDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  games?: Maybe<GameUpdateManyWithoutUserInput>;
  choices?: Maybe<ChoiceUpdateManyWithoutUserInput>;
}

export interface ChoiceUpdateManyWithoutUserInput {
  create?: Maybe<ChoiceCreateWithoutUserInput[] | ChoiceCreateWithoutUserInput>;
  delete?: Maybe<ChoiceWhereUniqueInput[] | ChoiceWhereUniqueInput>;
  connect?: Maybe<ChoiceWhereUniqueInput[] | ChoiceWhereUniqueInput>;
  set?: Maybe<ChoiceWhereUniqueInput[] | ChoiceWhereUniqueInput>;
  disconnect?: Maybe<ChoiceWhereUniqueInput[] | ChoiceWhereUniqueInput>;
  update?: Maybe<
    | ChoiceUpdateWithWhereUniqueWithoutUserInput[]
    | ChoiceUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ChoiceUpsertWithWhereUniqueWithoutUserInput[]
    | ChoiceUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<ChoiceScalarWhereInput[] | ChoiceScalarWhereInput>;
  updateMany?: Maybe<
    | ChoiceUpdateManyWithWhereNestedInput[]
    | ChoiceUpdateManyWithWhereNestedInput
  >;
}

export interface ChoiceUpdateWithWhereUniqueWithoutUserInput {
  where: ChoiceWhereUniqueInput;
  data: ChoiceUpdateWithoutUserDataInput;
}

export interface ChoiceUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  question?: Maybe<QuestionUpdateOneRequiredWithoutChoicesInput>;
  answers?: Maybe<AnswerUpdateManyWithoutChoiceInput>;
}

export interface ChoiceUpsertWithWhereUniqueWithoutUserInput {
  where: ChoiceWhereUniqueInput;
  update: ChoiceUpdateWithoutUserDataInput;
  create: ChoiceCreateWithoutUserInput;
}

export interface ChoiceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChoiceScalarWhereInput[] | ChoiceScalarWhereInput>;
  OR?: Maybe<ChoiceScalarWhereInput[] | ChoiceScalarWhereInput>;
  NOT?: Maybe<ChoiceScalarWhereInput[] | ChoiceScalarWhereInput>;
}

export interface ChoiceUpdateManyWithWhereNestedInput {
  where: ChoiceScalarWhereInput;
  data: ChoiceUpdateManyDataInput;
}

export interface ChoiceUpdateManyDataInput {
  title?: Maybe<String>;
}

export interface UserUpsertWithoutQuestionsInput {
  update: UserUpdateWithoutQuestionsDataInput;
  create: UserCreateWithoutQuestionsInput;
}

export interface GameUpdateOneRequiredWithoutQuestionsInput {
  create?: Maybe<GameCreateWithoutQuestionsInput>;
  update?: Maybe<GameUpdateWithoutQuestionsDataInput>;
  upsert?: Maybe<GameUpsertWithoutQuestionsInput>;
  connect?: Maybe<GameWhereUniqueInput>;
}

export interface GameUpdateWithoutQuestionsDataInput {
  title?: Maybe<String>;
  open?: Maybe<Boolean>;
  finish?: Maybe<Boolean>;
  state?: Maybe<Int>;
  players?: Maybe<PlayerUpdateManyWithoutGameInput>;
  currentQuestion?: Maybe<QuestionUpdateOneInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutGamesInput>;
}

export interface QuestionUpdateOneInput {
  create?: Maybe<QuestionCreateInput>;
  update?: Maybe<QuestionUpdateDataInput>;
  upsert?: Maybe<QuestionUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<QuestionWhereUniqueInput>;
}

export interface QuestionUpdateDataInput {
  duration?: Maybe<Int>;
  title?: Maybe<String>;
  choices?: Maybe<ChoiceUpdateManyWithoutQuestionInput>;
  goodChoice?: Maybe<ChoiceUpdateOneInput>;
  answers?: Maybe<AnswerUpdateManyWithoutQuestionInput>;
  order?: Maybe<Int>;
  user?: Maybe<UserUpdateOneRequiredWithoutQuestionsInput>;
  game?: Maybe<GameUpdateOneRequiredWithoutQuestionsInput>;
  launched?: Maybe<DateTimeInput>;
}

export interface AnswerUpdateManyWithoutQuestionInput {
  create?: Maybe<
    AnswerCreateWithoutQuestionInput[] | AnswerCreateWithoutQuestionInput
  >;
  delete?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  connect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  set?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  disconnect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  update?: Maybe<
    | AnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    | AnswerUpdateWithWhereUniqueWithoutQuestionInput
  >;
  upsert?: Maybe<
    | AnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    | AnswerUpsertWithWhereUniqueWithoutQuestionInput
  >;
  deleteMany?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
}

export interface AnswerUpdateWithWhereUniqueWithoutQuestionInput {
  where: AnswerWhereUniqueInput;
  data: AnswerUpdateWithoutQuestionDataInput;
}

export interface AnswerUpdateWithoutQuestionDataInput {
  choice?: Maybe<ChoiceUpdateOneRequiredWithoutAnswersInput>;
  player?: Maybe<PlayerUpdateOneRequiredWithoutAnswersInput>;
}

export interface AnswerUpsertWithWhereUniqueWithoutQuestionInput {
  where: AnswerWhereUniqueInput;
  update: AnswerUpdateWithoutQuestionDataInput;
  create: AnswerCreateWithoutQuestionInput;
}

export interface AnswerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  OR?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  NOT?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
}

export interface QuestionUpsertNestedInput {
  update: QuestionUpdateDataInput;
  create: QuestionCreateInput;
}

export interface UserUpdateOneRequiredWithoutGamesInput {
  create?: Maybe<UserCreateWithoutGamesInput>;
  update?: Maybe<UserUpdateWithoutGamesDataInput>;
  upsert?: Maybe<UserUpsertWithoutGamesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutGamesDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  choices?: Maybe<ChoiceUpdateManyWithoutUserInput>;
  questions?: Maybe<QuestionUpdateManyWithoutUserInput>;
}

export interface QuestionUpdateManyWithoutUserInput {
  create?: Maybe<
    QuestionCreateWithoutUserInput[] | QuestionCreateWithoutUserInput
  >;
  delete?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  connect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  set?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  disconnect?: Maybe<QuestionWhereUniqueInput[] | QuestionWhereUniqueInput>;
  update?: Maybe<
    | QuestionUpdateWithWhereUniqueWithoutUserInput[]
    | QuestionUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | QuestionUpsertWithWhereUniqueWithoutUserInput[]
    | QuestionUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  updateMany?: Maybe<
    | QuestionUpdateManyWithWhereNestedInput[]
    | QuestionUpdateManyWithWhereNestedInput
  >;
}

export interface QuestionUpdateWithWhereUniqueWithoutUserInput {
  where: QuestionWhereUniqueInput;
  data: QuestionUpdateWithoutUserDataInput;
}

export interface QuestionUpdateWithoutUserDataInput {
  duration?: Maybe<Int>;
  title?: Maybe<String>;
  choices?: Maybe<ChoiceUpdateManyWithoutQuestionInput>;
  goodChoice?: Maybe<ChoiceUpdateOneInput>;
  answers?: Maybe<AnswerUpdateManyWithoutQuestionInput>;
  order?: Maybe<Int>;
  game?: Maybe<GameUpdateOneRequiredWithoutQuestionsInput>;
  launched?: Maybe<DateTimeInput>;
}

export interface QuestionUpsertWithWhereUniqueWithoutUserInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateWithoutUserDataInput;
  create: QuestionCreateWithoutUserInput;
}

export interface QuestionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  duration?: Maybe<Int>;
  duration_not?: Maybe<Int>;
  duration_in?: Maybe<Int[] | Int>;
  duration_not_in?: Maybe<Int[] | Int>;
  duration_lt?: Maybe<Int>;
  duration_lte?: Maybe<Int>;
  duration_gt?: Maybe<Int>;
  duration_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  launched?: Maybe<DateTimeInput>;
  launched_not?: Maybe<DateTimeInput>;
  launched_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  launched_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  launched_lt?: Maybe<DateTimeInput>;
  launched_lte?: Maybe<DateTimeInput>;
  launched_gt?: Maybe<DateTimeInput>;
  launched_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  OR?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
  NOT?: Maybe<QuestionScalarWhereInput[] | QuestionScalarWhereInput>;
}

export interface QuestionUpdateManyWithWhereNestedInput {
  where: QuestionScalarWhereInput;
  data: QuestionUpdateManyDataInput;
}

export interface QuestionUpdateManyDataInput {
  duration?: Maybe<Int>;
  title?: Maybe<String>;
  order?: Maybe<Int>;
  launched?: Maybe<DateTimeInput>;
}

export interface UserUpsertWithoutGamesInput {
  update: UserUpdateWithoutGamesDataInput;
  create: UserCreateWithoutGamesInput;
}

export interface GameUpsertWithoutQuestionsInput {
  update: GameUpdateWithoutQuestionsDataInput;
  create: GameCreateWithoutQuestionsInput;
}

export interface QuestionUpsertWithoutAnswersInput {
  update: QuestionUpdateWithoutAnswersDataInput;
  create: QuestionCreateWithoutAnswersInput;
}

export interface AnswerUpsertWithWhereUniqueWithoutPlayerInput {
  where: AnswerWhereUniqueInput;
  update: AnswerUpdateWithoutPlayerDataInput;
  create: AnswerCreateWithoutPlayerInput;
}

export interface PlayerUpsertWithWhereUniqueWithoutGameInput {
  where: PlayerWhereUniqueInput;
  update: PlayerUpdateWithoutGameDataInput;
  create: PlayerCreateWithoutGameInput;
}

export interface PlayerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  score?: Maybe<Int>;
  score_not?: Maybe<Int>;
  score_in?: Maybe<Int[] | Int>;
  score_not_in?: Maybe<Int[] | Int>;
  score_lt?: Maybe<Int>;
  score_lte?: Maybe<Int>;
  score_gt?: Maybe<Int>;
  score_gte?: Maybe<Int>;
  responseTime?: Maybe<Int>;
  responseTime_not?: Maybe<Int>;
  responseTime_in?: Maybe<Int[] | Int>;
  responseTime_not_in?: Maybe<Int[] | Int>;
  responseTime_lt?: Maybe<Int>;
  responseTime_lte?: Maybe<Int>;
  responseTime_gt?: Maybe<Int>;
  responseTime_gte?: Maybe<Int>;
  AND?: Maybe<PlayerScalarWhereInput[] | PlayerScalarWhereInput>;
  OR?: Maybe<PlayerScalarWhereInput[] | PlayerScalarWhereInput>;
  NOT?: Maybe<PlayerScalarWhereInput[] | PlayerScalarWhereInput>;
}

export interface PlayerUpdateManyWithWhereNestedInput {
  where: PlayerScalarWhereInput;
  data: PlayerUpdateManyDataInput;
}

export interface PlayerUpdateManyDataInput {
  name?: Maybe<String>;
  score?: Maybe<Int>;
  responseTime?: Maybe<Int>;
}

export interface GameUpsertWithWhereUniqueWithoutUserInput {
  where: GameWhereUniqueInput;
  update: GameUpdateWithoutUserDataInput;
  create: GameCreateWithoutUserInput;
}

export interface GameScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  open?: Maybe<Boolean>;
  open_not?: Maybe<Boolean>;
  finish?: Maybe<Boolean>;
  finish_not?: Maybe<Boolean>;
  state?: Maybe<Int>;
  state_not?: Maybe<Int>;
  state_in?: Maybe<Int[] | Int>;
  state_not_in?: Maybe<Int[] | Int>;
  state_lt?: Maybe<Int>;
  state_lte?: Maybe<Int>;
  state_gt?: Maybe<Int>;
  state_gte?: Maybe<Int>;
  AND?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  OR?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  NOT?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
}

export interface GameUpdateManyWithWhereNestedInput {
  where: GameScalarWhereInput;
  data: GameUpdateManyDataInput;
}

export interface GameUpdateManyDataInput {
  title?: Maybe<String>;
  open?: Maybe<Boolean>;
  finish?: Maybe<Boolean>;
  state?: Maybe<Int>;
}

export interface UserUpsertWithoutChoicesInput {
  update: UserUpdateWithoutChoicesDataInput;
  create: UserCreateWithoutChoicesInput;
}

export interface ChoiceUpsertWithWhereUniqueWithoutQuestionInput {
  where: ChoiceWhereUniqueInput;
  update: ChoiceUpdateWithoutQuestionDataInput;
  create: ChoiceCreateWithoutQuestionInput;
}

export interface QuestionUpsertWithWhereUniqueWithoutGameInput {
  where: QuestionWhereUniqueInput;
  update: QuestionUpdateWithoutGameDataInput;
  create: QuestionCreateWithoutGameInput;
}

export interface GameUpsertWithoutPlayersInput {
  update: GameUpdateWithoutPlayersDataInput;
  create: GameCreateWithoutPlayersInput;
}

export interface PlayerUpsertWithoutAnswersInput {
  update: PlayerUpdateWithoutAnswersDataInput;
  create: PlayerCreateWithoutAnswersInput;
}

export interface AnswerUpsertWithWhereUniqueWithoutChoiceInput {
  where: AnswerWhereUniqueInput;
  update: AnswerUpdateWithoutChoiceDataInput;
  create: AnswerCreateWithoutChoiceInput;
}

export interface ChoiceUpsertNestedInput {
  update: ChoiceUpdateDataInput;
  create: ChoiceCreateInput;
}

export interface QuestionUpsertWithoutChoicesInput {
  update: QuestionUpdateWithoutChoicesDataInput;
  create: QuestionCreateWithoutChoicesInput;
}

export interface ChoiceUpsertWithoutAnswersInput {
  update: ChoiceUpdateWithoutAnswersDataInput;
  create: ChoiceCreateWithoutAnswersInput;
}

export interface ChoiceUpdateInput {
  title?: Maybe<String>;
  question?: Maybe<QuestionUpdateOneRequiredWithoutChoicesInput>;
  answers?: Maybe<AnswerUpdateManyWithoutChoiceInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutChoicesInput>;
}

export interface ChoiceUpdateManyMutationInput {
  title?: Maybe<String>;
}

export interface GameCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  open?: Maybe<Boolean>;
  finish?: Maybe<Boolean>;
  state?: Maybe<Int>;
  players?: Maybe<PlayerCreateManyWithoutGameInput>;
  questions?: Maybe<QuestionCreateManyWithoutGameInput>;
  currentQuestion?: Maybe<QuestionCreateOneInput>;
  user: UserCreateOneWithoutGamesInput;
}

export interface GameUpdateInput {
  title?: Maybe<String>;
  open?: Maybe<Boolean>;
  finish?: Maybe<Boolean>;
  state?: Maybe<Int>;
  players?: Maybe<PlayerUpdateManyWithoutGameInput>;
  questions?: Maybe<QuestionUpdateManyWithoutGameInput>;
  currentQuestion?: Maybe<QuestionUpdateOneInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutGamesInput>;
}

export interface GameUpdateManyMutationInput {
  title?: Maybe<String>;
  open?: Maybe<Boolean>;
  finish?: Maybe<Boolean>;
  state?: Maybe<Int>;
}

export interface PlayerCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  game: GameCreateOneWithoutPlayersInput;
  score?: Maybe<Int>;
  responseTime?: Maybe<Int>;
  answers?: Maybe<AnswerCreateManyWithoutPlayerInput>;
}

export interface PlayerUpdateInput {
  name?: Maybe<String>;
  game?: Maybe<GameUpdateOneRequiredWithoutPlayersInput>;
  score?: Maybe<Int>;
  responseTime?: Maybe<Int>;
  answers?: Maybe<AnswerUpdateManyWithoutPlayerInput>;
}

export interface PlayerUpdateManyMutationInput {
  name?: Maybe<String>;
  score?: Maybe<Int>;
  responseTime?: Maybe<Int>;
}

export interface QuestionUpdateInput {
  duration?: Maybe<Int>;
  title?: Maybe<String>;
  choices?: Maybe<ChoiceUpdateManyWithoutQuestionInput>;
  goodChoice?: Maybe<ChoiceUpdateOneInput>;
  answers?: Maybe<AnswerUpdateManyWithoutQuestionInput>;
  order?: Maybe<Int>;
  user?: Maybe<UserUpdateOneRequiredWithoutQuestionsInput>;
  game?: Maybe<GameUpdateOneRequiredWithoutQuestionsInput>;
  launched?: Maybe<DateTimeInput>;
}

export interface QuestionUpdateManyMutationInput {
  duration?: Maybe<Int>;
  title?: Maybe<String>;
  order?: Maybe<Int>;
  launched?: Maybe<DateTimeInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  games?: Maybe<GameCreateManyWithoutUserInput>;
  choices?: Maybe<ChoiceCreateManyWithoutUserInput>;
  questions?: Maybe<QuestionCreateManyWithoutUserInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  games?: Maybe<GameUpdateManyWithoutUserInput>;
  choices?: Maybe<ChoiceUpdateManyWithoutUserInput>;
  questions?: Maybe<QuestionUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface AnswerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AnswerWhereInput>;
  AND?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
  OR?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
  NOT?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
}

export interface ChoiceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChoiceWhereInput>;
  AND?: Maybe<ChoiceSubscriptionWhereInput[] | ChoiceSubscriptionWhereInput>;
  OR?: Maybe<ChoiceSubscriptionWhereInput[] | ChoiceSubscriptionWhereInput>;
  NOT?: Maybe<ChoiceSubscriptionWhereInput[] | ChoiceSubscriptionWhereInput>;
}

export interface GameSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GameWhereInput>;
  AND?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
  OR?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
  NOT?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
}

export interface PlayerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PlayerWhereInput>;
  AND?: Maybe<PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput>;
  OR?: Maybe<PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput>;
  NOT?: Maybe<PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput>;
}

export interface QuestionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuestionWhereInput>;
  AND?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
  OR?: Maybe<QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput>;
  NOT?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Answer {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface AnswerPromise extends Promise<Answer>, Fragmentable {
  id: () => Promise<ID_Output>;
  choice: <T = ChoicePromise>() => T;
  player: <T = PlayerPromise>() => T;
  question: <T = QuestionPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AnswerSubscription
  extends Promise<AsyncIterator<Answer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  choice: <T = ChoiceSubscription>() => T;
  player: <T = PlayerSubscription>() => T;
  question: <T = QuestionSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AnswerNullablePromise
  extends Promise<Answer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  choice: <T = ChoicePromise>() => T;
  player: <T = PlayerPromise>() => T;
  question: <T = QuestionPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Choice {
  id: ID_Output;
  title: String;
}

export interface ChoicePromise extends Promise<Choice>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  question: <T = QuestionPromise>() => T;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
}

export interface ChoiceSubscription
  extends Promise<AsyncIterator<Choice>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  question: <T = QuestionSubscription>() => T;
  answers: <T = Promise<AsyncIterator<AnswerSubscription>>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserSubscription>() => T;
}

export interface ChoiceNullablePromise
  extends Promise<Choice | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  question: <T = QuestionPromise>() => T;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
}

export interface Question {
  id: ID_Output;
  duration: Int;
  title: String;
  order: Int;
  launched?: DateTimeOutput;
}

export interface QuestionPromise extends Promise<Question>, Fragmentable {
  id: () => Promise<ID_Output>;
  duration: () => Promise<Int>;
  title: () => Promise<String>;
  choices: <T = FragmentableArray<Choice>>(args?: {
    where?: ChoiceWhereInput;
    orderBy?: ChoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  goodChoice: <T = ChoicePromise>() => T;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  order: () => Promise<Int>;
  user: <T = UserPromise>() => T;
  game: <T = GamePromise>() => T;
  launched: () => Promise<DateTimeOutput>;
}

export interface QuestionSubscription
  extends Promise<AsyncIterator<Question>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  duration: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  choices: <T = Promise<AsyncIterator<ChoiceSubscription>>>(args?: {
    where?: ChoiceWhereInput;
    orderBy?: ChoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  goodChoice: <T = ChoiceSubscription>() => T;
  answers: <T = Promise<AsyncIterator<AnswerSubscription>>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  order: () => Promise<AsyncIterator<Int>>;
  user: <T = UserSubscription>() => T;
  game: <T = GameSubscription>() => T;
  launched: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface QuestionNullablePromise
  extends Promise<Question | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  duration: () => Promise<Int>;
  title: () => Promise<String>;
  choices: <T = FragmentableArray<Choice>>(args?: {
    where?: ChoiceWhereInput;
    orderBy?: ChoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  goodChoice: <T = ChoicePromise>() => T;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  order: () => Promise<Int>;
  user: <T = UserPromise>() => T;
  game: <T = GamePromise>() => T;
  launched: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  games: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  choices: <T = FragmentableArray<Choice>>(args?: {
    where?: ChoiceWhereInput;
    orderBy?: ChoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  games: <T = Promise<AsyncIterator<GameSubscription>>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  choices: <T = Promise<AsyncIterator<ChoiceSubscription>>>(args?: {
    where?: ChoiceWhereInput;
    orderBy?: ChoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  questions: <T = Promise<AsyncIterator<QuestionSubscription>>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  games: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  choices: <T = FragmentableArray<Choice>>(args?: {
    where?: ChoiceWhereInput;
    orderBy?: ChoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Game {
  id: ID_Output;
  title: String;
  open: Boolean;
  finish: Boolean;
  state?: Int;
}

export interface GamePromise extends Promise<Game>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  open: () => Promise<Boolean>;
  finish: () => Promise<Boolean>;
  state: () => Promise<Int>;
  players: <T = FragmentableArray<Player>>(args?: {
    where?: PlayerWhereInput;
    orderBy?: PlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  currentQuestion: <T = QuestionPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface GameSubscription
  extends Promise<AsyncIterator<Game>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  open: () => Promise<AsyncIterator<Boolean>>;
  finish: () => Promise<AsyncIterator<Boolean>>;
  state: () => Promise<AsyncIterator<Int>>;
  players: <T = Promise<AsyncIterator<PlayerSubscription>>>(args?: {
    where?: PlayerWhereInput;
    orderBy?: PlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  questions: <T = Promise<AsyncIterator<QuestionSubscription>>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  currentQuestion: <T = QuestionSubscription>() => T;
  user: <T = UserSubscription>() => T;
}

export interface GameNullablePromise
  extends Promise<Game | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  open: () => Promise<Boolean>;
  finish: () => Promise<Boolean>;
  state: () => Promise<Int>;
  players: <T = FragmentableArray<Player>>(args?: {
    where?: PlayerWhereInput;
    orderBy?: PlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  questions: <T = FragmentableArray<Question>>(args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  currentQuestion: <T = QuestionPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface Player {
  id: ID_Output;
  name: String;
  score?: Int;
  responseTime?: Int;
}

export interface PlayerPromise extends Promise<Player>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  game: <T = GamePromise>() => T;
  score: () => Promise<Int>;
  responseTime: () => Promise<Int>;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PlayerSubscription
  extends Promise<AsyncIterator<Player>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  game: <T = GameSubscription>() => T;
  score: () => Promise<AsyncIterator<Int>>;
  responseTime: () => Promise<AsyncIterator<Int>>;
  answers: <T = Promise<AsyncIterator<AnswerSubscription>>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PlayerNullablePromise
  extends Promise<Player | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  game: <T = GamePromise>() => T;
  score: () => Promise<Int>;
  responseTime: () => Promise<Int>;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AnswerConnection {
  pageInfo: PageInfo;
  edges: AnswerEdge[];
}

export interface AnswerConnectionPromise
  extends Promise<AnswerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AnswerEdge>>() => T;
  aggregate: <T = AggregateAnswerPromise>() => T;
}

export interface AnswerConnectionSubscription
  extends Promise<AsyncIterator<AnswerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AnswerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAnswerSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AnswerEdge {
  node: Answer;
  cursor: String;
}

export interface AnswerEdgePromise extends Promise<AnswerEdge>, Fragmentable {
  node: <T = AnswerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AnswerEdgeSubscription
  extends Promise<AsyncIterator<AnswerEdge>>,
    Fragmentable {
  node: <T = AnswerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAnswer {
  count: Int;
}

export interface AggregateAnswerPromise
  extends Promise<AggregateAnswer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAnswerSubscription
  extends Promise<AsyncIterator<AggregateAnswer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChoiceConnection {
  pageInfo: PageInfo;
  edges: ChoiceEdge[];
}

export interface ChoiceConnectionPromise
  extends Promise<ChoiceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChoiceEdge>>() => T;
  aggregate: <T = AggregateChoicePromise>() => T;
}

export interface ChoiceConnectionSubscription
  extends Promise<AsyncIterator<ChoiceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChoiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChoiceSubscription>() => T;
}

export interface ChoiceEdge {
  node: Choice;
  cursor: String;
}

export interface ChoiceEdgePromise extends Promise<ChoiceEdge>, Fragmentable {
  node: <T = ChoicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChoiceEdgeSubscription
  extends Promise<AsyncIterator<ChoiceEdge>>,
    Fragmentable {
  node: <T = ChoiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChoice {
  count: Int;
}

export interface AggregateChoicePromise
  extends Promise<AggregateChoice>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChoiceSubscription
  extends Promise<AsyncIterator<AggregateChoice>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GameConnection {
  pageInfo: PageInfo;
  edges: GameEdge[];
}

export interface GameConnectionPromise
  extends Promise<GameConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GameEdge>>() => T;
  aggregate: <T = AggregateGamePromise>() => T;
}

export interface GameConnectionSubscription
  extends Promise<AsyncIterator<GameConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GameEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGameSubscription>() => T;
}

export interface GameEdge {
  node: Game;
  cursor: String;
}

export interface GameEdgePromise extends Promise<GameEdge>, Fragmentable {
  node: <T = GamePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GameEdgeSubscription
  extends Promise<AsyncIterator<GameEdge>>,
    Fragmentable {
  node: <T = GameSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGame {
  count: Int;
}

export interface AggregateGamePromise
  extends Promise<AggregateGame>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGameSubscription
  extends Promise<AsyncIterator<AggregateGame>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PlayerConnection {
  pageInfo: PageInfo;
  edges: PlayerEdge[];
}

export interface PlayerConnectionPromise
  extends Promise<PlayerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlayerEdge>>() => T;
  aggregate: <T = AggregatePlayerPromise>() => T;
}

export interface PlayerConnectionSubscription
  extends Promise<AsyncIterator<PlayerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlayerEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlayerSubscription>() => T;
}

export interface PlayerEdge {
  node: Player;
  cursor: String;
}

export interface PlayerEdgePromise extends Promise<PlayerEdge>, Fragmentable {
  node: <T = PlayerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlayerEdgeSubscription
  extends Promise<AsyncIterator<PlayerEdge>>,
    Fragmentable {
  node: <T = PlayerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlayer {
  count: Int;
}

export interface AggregatePlayerPromise
  extends Promise<AggregatePlayer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlayerSubscription
  extends Promise<AsyncIterator<AggregatePlayer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface QuestionConnection {
  pageInfo: PageInfo;
  edges: QuestionEdge[];
}

export interface QuestionConnectionPromise
  extends Promise<QuestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuestionEdge>>() => T;
  aggregate: <T = AggregateQuestionPromise>() => T;
}

export interface QuestionConnectionSubscription
  extends Promise<AsyncIterator<QuestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuestionSubscription>() => T;
}

export interface QuestionEdge {
  node: Question;
  cursor: String;
}

export interface QuestionEdgePromise
  extends Promise<QuestionEdge>,
    Fragmentable {
  node: <T = QuestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuestionEdgeSubscription
  extends Promise<AsyncIterator<QuestionEdge>>,
    Fragmentable {
  node: <T = QuestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuestion {
  count: Int;
}

export interface AggregateQuestionPromise
  extends Promise<AggregateQuestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuestionSubscription
  extends Promise<AsyncIterator<AggregateQuestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AnswerSubscriptionPayload {
  mutation: MutationType;
  node: Answer;
  updatedFields: String[];
  previousValues: AnswerPreviousValues;
}

export interface AnswerSubscriptionPayloadPromise
  extends Promise<AnswerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AnswerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AnswerPreviousValuesPromise>() => T;
}

export interface AnswerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AnswerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AnswerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AnswerPreviousValuesSubscription>() => T;
}

export interface AnswerPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface AnswerPreviousValuesPromise
  extends Promise<AnswerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AnswerPreviousValuesSubscription
  extends Promise<AsyncIterator<AnswerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ChoiceSubscriptionPayload {
  mutation: MutationType;
  node: Choice;
  updatedFields: String[];
  previousValues: ChoicePreviousValues;
}

export interface ChoiceSubscriptionPayloadPromise
  extends Promise<ChoiceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChoicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChoicePreviousValuesPromise>() => T;
}

export interface ChoiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChoiceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChoiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChoicePreviousValuesSubscription>() => T;
}

export interface ChoicePreviousValues {
  id: ID_Output;
  title: String;
}

export interface ChoicePreviousValuesPromise
  extends Promise<ChoicePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
}

export interface ChoicePreviousValuesSubscription
  extends Promise<AsyncIterator<ChoicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface GameSubscriptionPayload {
  mutation: MutationType;
  node: Game;
  updatedFields: String[];
  previousValues: GamePreviousValues;
}

export interface GameSubscriptionPayloadPromise
  extends Promise<GameSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GamePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GamePreviousValuesPromise>() => T;
}

export interface GameSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GameSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GameSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GamePreviousValuesSubscription>() => T;
}

export interface GamePreviousValues {
  id: ID_Output;
  title: String;
  open: Boolean;
  finish: Boolean;
  state?: Int;
}

export interface GamePreviousValuesPromise
  extends Promise<GamePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  open: () => Promise<Boolean>;
  finish: () => Promise<Boolean>;
  state: () => Promise<Int>;
}

export interface GamePreviousValuesSubscription
  extends Promise<AsyncIterator<GamePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  open: () => Promise<AsyncIterator<Boolean>>;
  finish: () => Promise<AsyncIterator<Boolean>>;
  state: () => Promise<AsyncIterator<Int>>;
}

export interface PlayerSubscriptionPayload {
  mutation: MutationType;
  node: Player;
  updatedFields: String[];
  previousValues: PlayerPreviousValues;
}

export interface PlayerSubscriptionPayloadPromise
  extends Promise<PlayerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlayerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlayerPreviousValuesPromise>() => T;
}

export interface PlayerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlayerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlayerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlayerPreviousValuesSubscription>() => T;
}

export interface PlayerPreviousValues {
  id: ID_Output;
  name: String;
  score?: Int;
  responseTime?: Int;
}

export interface PlayerPreviousValuesPromise
  extends Promise<PlayerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  score: () => Promise<Int>;
  responseTime: () => Promise<Int>;
}

export interface PlayerPreviousValuesSubscription
  extends Promise<AsyncIterator<PlayerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  score: () => Promise<AsyncIterator<Int>>;
  responseTime: () => Promise<AsyncIterator<Int>>;
}

export interface QuestionSubscriptionPayload {
  mutation: MutationType;
  node: Question;
  updatedFields: String[];
  previousValues: QuestionPreviousValues;
}

export interface QuestionSubscriptionPayloadPromise
  extends Promise<QuestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuestionPreviousValuesPromise>() => T;
}

export interface QuestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuestionPreviousValuesSubscription>() => T;
}

export interface QuestionPreviousValues {
  id: ID_Output;
  duration: Int;
  title: String;
  order: Int;
  launched?: DateTimeOutput;
}

export interface QuestionPreviousValuesPromise
  extends Promise<QuestionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  duration: () => Promise<Int>;
  title: () => Promise<String>;
  order: () => Promise<Int>;
  launched: () => Promise<DateTimeOutput>;
}

export interface QuestionPreviousValuesSubscription
  extends Promise<AsyncIterator<QuestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  duration: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
  launched: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Player",
    embedded: false
  },
  {
    name: "Answer",
    embedded: false
  },
  {
    name: "Question",
    embedded: false
  },
  {
    name: "Choice",
    embedded: false
  },
  {
    name: "Game",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
