module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAnswer {
  count: Int!
}

type AggregateChoice {
  count: Int!
}

type AggregateGame {
  count: Int!
}

type AggregatePlayer {
  count: Int!
}

type AggregateQuestion {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Answer {
  id: ID!
  choice: Choice!
  player: Player!
}

type AnswerConnection {
  pageInfo: PageInfo!
  edges: [AnswerEdge]!
  aggregate: AggregateAnswer!
}

input AnswerCreateInput {
  id: ID
  choice: ChoiceCreateOneWithoutAnswersInput!
  player: PlayerCreateOneWithoutAnswersInput!
}

input AnswerCreateManyInput {
  create: [AnswerCreateInput!]
  connect: [AnswerWhereUniqueInput!]
}

input AnswerCreateManyWithoutChoiceInput {
  create: [AnswerCreateWithoutChoiceInput!]
  connect: [AnswerWhereUniqueInput!]
}

input AnswerCreateManyWithoutPlayerInput {
  create: [AnswerCreateWithoutPlayerInput!]
  connect: [AnswerWhereUniqueInput!]
}

input AnswerCreateWithoutChoiceInput {
  id: ID
  player: PlayerCreateOneWithoutAnswersInput!
}

input AnswerCreateWithoutPlayerInput {
  id: ID
  choice: ChoiceCreateOneWithoutAnswersInput!
}

type AnswerEdge {
  node: Answer!
  cursor: String!
}

enum AnswerOrderByInput {
  id_ASC
  id_DESC
}

type AnswerPreviousValues {
  id: ID!
}

input AnswerScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [AnswerScalarWhereInput!]
  OR: [AnswerScalarWhereInput!]
  NOT: [AnswerScalarWhereInput!]
}

type AnswerSubscriptionPayload {
  mutation: MutationType!
  node: Answer
  updatedFields: [String!]
  previousValues: AnswerPreviousValues
}

input AnswerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AnswerWhereInput
  AND: [AnswerSubscriptionWhereInput!]
  OR: [AnswerSubscriptionWhereInput!]
  NOT: [AnswerSubscriptionWhereInput!]
}

input AnswerUpdateDataInput {
  choice: ChoiceUpdateOneRequiredWithoutAnswersInput
  player: PlayerUpdateOneRequiredWithoutAnswersInput
}

input AnswerUpdateInput {
  choice: ChoiceUpdateOneRequiredWithoutAnswersInput
  player: PlayerUpdateOneRequiredWithoutAnswersInput
}

input AnswerUpdateManyInput {
  create: [AnswerCreateInput!]
  update: [AnswerUpdateWithWhereUniqueNestedInput!]
  upsert: [AnswerUpsertWithWhereUniqueNestedInput!]
  delete: [AnswerWhereUniqueInput!]
  connect: [AnswerWhereUniqueInput!]
  set: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  deleteMany: [AnswerScalarWhereInput!]
}

input AnswerUpdateManyWithoutChoiceInput {
  create: [AnswerCreateWithoutChoiceInput!]
  delete: [AnswerWhereUniqueInput!]
  connect: [AnswerWhereUniqueInput!]
  set: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutChoiceInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutChoiceInput!]
  deleteMany: [AnswerScalarWhereInput!]
}

input AnswerUpdateManyWithoutPlayerInput {
  create: [AnswerCreateWithoutPlayerInput!]
  delete: [AnswerWhereUniqueInput!]
  connect: [AnswerWhereUniqueInput!]
  set: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutPlayerInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutPlayerInput!]
  deleteMany: [AnswerScalarWhereInput!]
}

input AnswerUpdateWithoutChoiceDataInput {
  player: PlayerUpdateOneRequiredWithoutAnswersInput
}

input AnswerUpdateWithoutPlayerDataInput {
  choice: ChoiceUpdateOneRequiredWithoutAnswersInput
}

input AnswerUpdateWithWhereUniqueNestedInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateDataInput!
}

input AnswerUpdateWithWhereUniqueWithoutChoiceInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateWithoutChoiceDataInput!
}

input AnswerUpdateWithWhereUniqueWithoutPlayerInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateWithoutPlayerDataInput!
}

input AnswerUpsertWithWhereUniqueNestedInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateDataInput!
  create: AnswerCreateInput!
}

input AnswerUpsertWithWhereUniqueWithoutChoiceInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateWithoutChoiceDataInput!
  create: AnswerCreateWithoutChoiceInput!
}

input AnswerUpsertWithWhereUniqueWithoutPlayerInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateWithoutPlayerDataInput!
  create: AnswerCreateWithoutPlayerInput!
}

input AnswerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  choice: ChoiceWhereInput
  player: PlayerWhereInput
  AND: [AnswerWhereInput!]
  OR: [AnswerWhereInput!]
  NOT: [AnswerWhereInput!]
}

input AnswerWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type Choice {
  id: ID!
  title: String!
  question: Question!
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer!]
  user: User!
}

type ChoiceConnection {
  pageInfo: PageInfo!
  edges: [ChoiceEdge]!
  aggregate: AggregateChoice!
}

input ChoiceCreateInput {
  id: ID
  title: String!
  question: QuestionCreateOneWithoutChoicesInput!
  answers: AnswerCreateManyWithoutChoiceInput
  user: UserCreateOneWithoutChoicesInput!
}

input ChoiceCreateManyWithoutQuestionInput {
  create: [ChoiceCreateWithoutQuestionInput!]
  connect: [ChoiceWhereUniqueInput!]
}

input ChoiceCreateManyWithoutUserInput {
  create: [ChoiceCreateWithoutUserInput!]
  connect: [ChoiceWhereUniqueInput!]
}

input ChoiceCreateOneInput {
  create: ChoiceCreateInput
  connect: ChoiceWhereUniqueInput
}

input ChoiceCreateOneWithoutAnswersInput {
  create: ChoiceCreateWithoutAnswersInput
  connect: ChoiceWhereUniqueInput
}

input ChoiceCreateWithoutAnswersInput {
  id: ID
  title: String!
  question: QuestionCreateOneWithoutChoicesInput!
  user: UserCreateOneWithoutChoicesInput!
}

input ChoiceCreateWithoutQuestionInput {
  id: ID
  title: String!
  answers: AnswerCreateManyWithoutChoiceInput
  user: UserCreateOneWithoutChoicesInput!
}

input ChoiceCreateWithoutUserInput {
  id: ID
  title: String!
  question: QuestionCreateOneWithoutChoicesInput!
  answers: AnswerCreateManyWithoutChoiceInput
}

type ChoiceEdge {
  node: Choice!
  cursor: String!
}

enum ChoiceOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
}

type ChoicePreviousValues {
  id: ID!
  title: String!
}

input ChoiceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  AND: [ChoiceScalarWhereInput!]
  OR: [ChoiceScalarWhereInput!]
  NOT: [ChoiceScalarWhereInput!]
}

type ChoiceSubscriptionPayload {
  mutation: MutationType!
  node: Choice
  updatedFields: [String!]
  previousValues: ChoicePreviousValues
}

input ChoiceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChoiceWhereInput
  AND: [ChoiceSubscriptionWhereInput!]
  OR: [ChoiceSubscriptionWhereInput!]
  NOT: [ChoiceSubscriptionWhereInput!]
}

input ChoiceUpdateDataInput {
  title: String
  question: QuestionUpdateOneRequiredWithoutChoicesInput
  answers: AnswerUpdateManyWithoutChoiceInput
  user: UserUpdateOneRequiredWithoutChoicesInput
}

input ChoiceUpdateInput {
  title: String
  question: QuestionUpdateOneRequiredWithoutChoicesInput
  answers: AnswerUpdateManyWithoutChoiceInput
  user: UserUpdateOneRequiredWithoutChoicesInput
}

input ChoiceUpdateManyDataInput {
  title: String
}

input ChoiceUpdateManyMutationInput {
  title: String
}

input ChoiceUpdateManyWithoutQuestionInput {
  create: [ChoiceCreateWithoutQuestionInput!]
  delete: [ChoiceWhereUniqueInput!]
  connect: [ChoiceWhereUniqueInput!]
  set: [ChoiceWhereUniqueInput!]
  disconnect: [ChoiceWhereUniqueInput!]
  update: [ChoiceUpdateWithWhereUniqueWithoutQuestionInput!]
  upsert: [ChoiceUpsertWithWhereUniqueWithoutQuestionInput!]
  deleteMany: [ChoiceScalarWhereInput!]
  updateMany: [ChoiceUpdateManyWithWhereNestedInput!]
}

input ChoiceUpdateManyWithoutUserInput {
  create: [ChoiceCreateWithoutUserInput!]
  delete: [ChoiceWhereUniqueInput!]
  connect: [ChoiceWhereUniqueInput!]
  set: [ChoiceWhereUniqueInput!]
  disconnect: [ChoiceWhereUniqueInput!]
  update: [ChoiceUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ChoiceUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ChoiceScalarWhereInput!]
  updateMany: [ChoiceUpdateManyWithWhereNestedInput!]
}

input ChoiceUpdateManyWithWhereNestedInput {
  where: ChoiceScalarWhereInput!
  data: ChoiceUpdateManyDataInput!
}

input ChoiceUpdateOneInput {
  create: ChoiceCreateInput
  update: ChoiceUpdateDataInput
  upsert: ChoiceUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ChoiceWhereUniqueInput
}

input ChoiceUpdateOneRequiredWithoutAnswersInput {
  create: ChoiceCreateWithoutAnswersInput
  update: ChoiceUpdateWithoutAnswersDataInput
  upsert: ChoiceUpsertWithoutAnswersInput
  connect: ChoiceWhereUniqueInput
}

input ChoiceUpdateWithoutAnswersDataInput {
  title: String
  question: QuestionUpdateOneRequiredWithoutChoicesInput
  user: UserUpdateOneRequiredWithoutChoicesInput
}

input ChoiceUpdateWithoutQuestionDataInput {
  title: String
  answers: AnswerUpdateManyWithoutChoiceInput
  user: UserUpdateOneRequiredWithoutChoicesInput
}

input ChoiceUpdateWithoutUserDataInput {
  title: String
  question: QuestionUpdateOneRequiredWithoutChoicesInput
  answers: AnswerUpdateManyWithoutChoiceInput
}

input ChoiceUpdateWithWhereUniqueWithoutQuestionInput {
  where: ChoiceWhereUniqueInput!
  data: ChoiceUpdateWithoutQuestionDataInput!
}

input ChoiceUpdateWithWhereUniqueWithoutUserInput {
  where: ChoiceWhereUniqueInput!
  data: ChoiceUpdateWithoutUserDataInput!
}

input ChoiceUpsertNestedInput {
  update: ChoiceUpdateDataInput!
  create: ChoiceCreateInput!
}

input ChoiceUpsertWithoutAnswersInput {
  update: ChoiceUpdateWithoutAnswersDataInput!
  create: ChoiceCreateWithoutAnswersInput!
}

input ChoiceUpsertWithWhereUniqueWithoutQuestionInput {
  where: ChoiceWhereUniqueInput!
  update: ChoiceUpdateWithoutQuestionDataInput!
  create: ChoiceCreateWithoutQuestionInput!
}

input ChoiceUpsertWithWhereUniqueWithoutUserInput {
  where: ChoiceWhereUniqueInput!
  update: ChoiceUpdateWithoutUserDataInput!
  create: ChoiceCreateWithoutUserInput!
}

input ChoiceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  question: QuestionWhereInput
  answers_every: AnswerWhereInput
  answers_some: AnswerWhereInput
  answers_none: AnswerWhereInput
  user: UserWhereInput
  AND: [ChoiceWhereInput!]
  OR: [ChoiceWhereInput!]
  NOT: [ChoiceWhereInput!]
}

input ChoiceWhereUniqueInput {
  id: ID
}

scalar DateTime

type Game {
  id: ID!
  title: String!
  open: Boolean!
  finish: Boolean!
  players(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player!]
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  currentQuestion: Question
  user: User!
}

type GameConnection {
  pageInfo: PageInfo!
  edges: [GameEdge]!
  aggregate: AggregateGame!
}

input GameCreateInput {
  id: ID
  title: String!
  open: Boolean
  finish: Boolean
  players: PlayerCreateManyWithoutGameInput
  questions: QuestionCreateManyWithoutGameInput
  currentQuestion: QuestionCreateOneInput
  user: UserCreateOneWithoutGamesInput!
}

input GameCreateManyWithoutUserInput {
  create: [GameCreateWithoutUserInput!]
  connect: [GameWhereUniqueInput!]
}

input GameCreateOneWithoutPlayersInput {
  create: GameCreateWithoutPlayersInput
  connect: GameWhereUniqueInput
}

input GameCreateOneWithoutQuestionsInput {
  create: GameCreateWithoutQuestionsInput
  connect: GameWhereUniqueInput
}

input GameCreateWithoutPlayersInput {
  id: ID
  title: String!
  open: Boolean
  finish: Boolean
  questions: QuestionCreateManyWithoutGameInput
  currentQuestion: QuestionCreateOneInput
  user: UserCreateOneWithoutGamesInput!
}

input GameCreateWithoutQuestionsInput {
  id: ID
  title: String!
  open: Boolean
  finish: Boolean
  players: PlayerCreateManyWithoutGameInput
  currentQuestion: QuestionCreateOneInput
  user: UserCreateOneWithoutGamesInput!
}

input GameCreateWithoutUserInput {
  id: ID
  title: String!
  open: Boolean
  finish: Boolean
  players: PlayerCreateManyWithoutGameInput
  questions: QuestionCreateManyWithoutGameInput
  currentQuestion: QuestionCreateOneInput
}

type GameEdge {
  node: Game!
  cursor: String!
}

enum GameOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  open_ASC
  open_DESC
  finish_ASC
  finish_DESC
}

type GamePreviousValues {
  id: ID!
  title: String!
  open: Boolean!
  finish: Boolean!
}

input GameScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  open: Boolean
  open_not: Boolean
  finish: Boolean
  finish_not: Boolean
  AND: [GameScalarWhereInput!]
  OR: [GameScalarWhereInput!]
  NOT: [GameScalarWhereInput!]
}

type GameSubscriptionPayload {
  mutation: MutationType!
  node: Game
  updatedFields: [String!]
  previousValues: GamePreviousValues
}

input GameSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GameWhereInput
  AND: [GameSubscriptionWhereInput!]
  OR: [GameSubscriptionWhereInput!]
  NOT: [GameSubscriptionWhereInput!]
}

input GameUpdateInput {
  title: String
  open: Boolean
  finish: Boolean
  players: PlayerUpdateManyWithoutGameInput
  questions: QuestionUpdateManyWithoutGameInput
  currentQuestion: QuestionUpdateOneInput
  user: UserUpdateOneRequiredWithoutGamesInput
}

input GameUpdateManyDataInput {
  title: String
  open: Boolean
  finish: Boolean
}

input GameUpdateManyMutationInput {
  title: String
  open: Boolean
  finish: Boolean
}

input GameUpdateManyWithoutUserInput {
  create: [GameCreateWithoutUserInput!]
  delete: [GameWhereUniqueInput!]
  connect: [GameWhereUniqueInput!]
  set: [GameWhereUniqueInput!]
  disconnect: [GameWhereUniqueInput!]
  update: [GameUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [GameUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [GameScalarWhereInput!]
  updateMany: [GameUpdateManyWithWhereNestedInput!]
}

input GameUpdateManyWithWhereNestedInput {
  where: GameScalarWhereInput!
  data: GameUpdateManyDataInput!
}

input GameUpdateOneRequiredWithoutPlayersInput {
  create: GameCreateWithoutPlayersInput
  update: GameUpdateWithoutPlayersDataInput
  upsert: GameUpsertWithoutPlayersInput
  connect: GameWhereUniqueInput
}

input GameUpdateOneRequiredWithoutQuestionsInput {
  create: GameCreateWithoutQuestionsInput
  update: GameUpdateWithoutQuestionsDataInput
  upsert: GameUpsertWithoutQuestionsInput
  connect: GameWhereUniqueInput
}

input GameUpdateWithoutPlayersDataInput {
  title: String
  open: Boolean
  finish: Boolean
  questions: QuestionUpdateManyWithoutGameInput
  currentQuestion: QuestionUpdateOneInput
  user: UserUpdateOneRequiredWithoutGamesInput
}

input GameUpdateWithoutQuestionsDataInput {
  title: String
  open: Boolean
  finish: Boolean
  players: PlayerUpdateManyWithoutGameInput
  currentQuestion: QuestionUpdateOneInput
  user: UserUpdateOneRequiredWithoutGamesInput
}

input GameUpdateWithoutUserDataInput {
  title: String
  open: Boolean
  finish: Boolean
  players: PlayerUpdateManyWithoutGameInput
  questions: QuestionUpdateManyWithoutGameInput
  currentQuestion: QuestionUpdateOneInput
}

input GameUpdateWithWhereUniqueWithoutUserInput {
  where: GameWhereUniqueInput!
  data: GameUpdateWithoutUserDataInput!
}

input GameUpsertWithoutPlayersInput {
  update: GameUpdateWithoutPlayersDataInput!
  create: GameCreateWithoutPlayersInput!
}

input GameUpsertWithoutQuestionsInput {
  update: GameUpdateWithoutQuestionsDataInput!
  create: GameCreateWithoutQuestionsInput!
}

input GameUpsertWithWhereUniqueWithoutUserInput {
  where: GameWhereUniqueInput!
  update: GameUpdateWithoutUserDataInput!
  create: GameCreateWithoutUserInput!
}

input GameWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  open: Boolean
  open_not: Boolean
  finish: Boolean
  finish_not: Boolean
  players_every: PlayerWhereInput
  players_some: PlayerWhereInput
  players_none: PlayerWhereInput
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  currentQuestion: QuestionWhereInput
  user: UserWhereInput
  AND: [GameWhereInput!]
  OR: [GameWhereInput!]
  NOT: [GameWhereInput!]
}

input GameWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createAnswer(data: AnswerCreateInput!): Answer!
  updateAnswer(data: AnswerUpdateInput!, where: AnswerWhereUniqueInput!): Answer
  upsertAnswer(where: AnswerWhereUniqueInput!, create: AnswerCreateInput!, update: AnswerUpdateInput!): Answer!
  deleteAnswer(where: AnswerWhereUniqueInput!): Answer
  deleteManyAnswers(where: AnswerWhereInput): BatchPayload!
  createChoice(data: ChoiceCreateInput!): Choice!
  updateChoice(data: ChoiceUpdateInput!, where: ChoiceWhereUniqueInput!): Choice
  updateManyChoices(data: ChoiceUpdateManyMutationInput!, where: ChoiceWhereInput): BatchPayload!
  upsertChoice(where: ChoiceWhereUniqueInput!, create: ChoiceCreateInput!, update: ChoiceUpdateInput!): Choice!
  deleteChoice(where: ChoiceWhereUniqueInput!): Choice
  deleteManyChoices(where: ChoiceWhereInput): BatchPayload!
  createGame(data: GameCreateInput!): Game!
  updateGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game
  updateManyGames(data: GameUpdateManyMutationInput!, where: GameWhereInput): BatchPayload!
  upsertGame(where: GameWhereUniqueInput!, create: GameCreateInput!, update: GameUpdateInput!): Game!
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteManyGames(where: GameWhereInput): BatchPayload!
  createPlayer(data: PlayerCreateInput!): Player!
  updatePlayer(data: PlayerUpdateInput!, where: PlayerWhereUniqueInput!): Player
  updateManyPlayers(data: PlayerUpdateManyMutationInput!, where: PlayerWhereInput): BatchPayload!
  upsertPlayer(where: PlayerWhereUniqueInput!, create: PlayerCreateInput!, update: PlayerUpdateInput!): Player!
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  deleteManyPlayers(where: PlayerWhereInput): BatchPayload!
  createQuestion(data: QuestionCreateInput!): Question!
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateManyQuestions(data: QuestionUpdateManyMutationInput!, where: QuestionWhereInput): BatchPayload!
  upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Player {
  id: ID!
  name: String!
  game: Game!
  score: Int
  responseTime: Int
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer!]
}

type PlayerConnection {
  pageInfo: PageInfo!
  edges: [PlayerEdge]!
  aggregate: AggregatePlayer!
}

input PlayerCreateInput {
  id: ID
  name: String!
  game: GameCreateOneWithoutPlayersInput!
  score: Int
  responseTime: Int
  answers: AnswerCreateManyWithoutPlayerInput
}

input PlayerCreateManyWithoutGameInput {
  create: [PlayerCreateWithoutGameInput!]
  connect: [PlayerWhereUniqueInput!]
}

input PlayerCreateOneWithoutAnswersInput {
  create: PlayerCreateWithoutAnswersInput
  connect: PlayerWhereUniqueInput
}

input PlayerCreateWithoutAnswersInput {
  id: ID
  name: String!
  game: GameCreateOneWithoutPlayersInput!
  score: Int
  responseTime: Int
}

input PlayerCreateWithoutGameInput {
  id: ID
  name: String!
  score: Int
  responseTime: Int
  answers: AnswerCreateManyWithoutPlayerInput
}

type PlayerEdge {
  node: Player!
  cursor: String!
}

enum PlayerOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  score_ASC
  score_DESC
  responseTime_ASC
  responseTime_DESC
}

type PlayerPreviousValues {
  id: ID!
  name: String!
  score: Int
  responseTime: Int
}

input PlayerScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  responseTime: Int
  responseTime_not: Int
  responseTime_in: [Int!]
  responseTime_not_in: [Int!]
  responseTime_lt: Int
  responseTime_lte: Int
  responseTime_gt: Int
  responseTime_gte: Int
  AND: [PlayerScalarWhereInput!]
  OR: [PlayerScalarWhereInput!]
  NOT: [PlayerScalarWhereInput!]
}

type PlayerSubscriptionPayload {
  mutation: MutationType!
  node: Player
  updatedFields: [String!]
  previousValues: PlayerPreviousValues
}

input PlayerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlayerWhereInput
  AND: [PlayerSubscriptionWhereInput!]
  OR: [PlayerSubscriptionWhereInput!]
  NOT: [PlayerSubscriptionWhereInput!]
}

input PlayerUpdateInput {
  name: String
  game: GameUpdateOneRequiredWithoutPlayersInput
  score: Int
  responseTime: Int
  answers: AnswerUpdateManyWithoutPlayerInput
}

input PlayerUpdateManyDataInput {
  name: String
  score: Int
  responseTime: Int
}

input PlayerUpdateManyMutationInput {
  name: String
  score: Int
  responseTime: Int
}

input PlayerUpdateManyWithoutGameInput {
  create: [PlayerCreateWithoutGameInput!]
  delete: [PlayerWhereUniqueInput!]
  connect: [PlayerWhereUniqueInput!]
  set: [PlayerWhereUniqueInput!]
  disconnect: [PlayerWhereUniqueInput!]
  update: [PlayerUpdateWithWhereUniqueWithoutGameInput!]
  upsert: [PlayerUpsertWithWhereUniqueWithoutGameInput!]
  deleteMany: [PlayerScalarWhereInput!]
  updateMany: [PlayerUpdateManyWithWhereNestedInput!]
}

input PlayerUpdateManyWithWhereNestedInput {
  where: PlayerScalarWhereInput!
  data: PlayerUpdateManyDataInput!
}

input PlayerUpdateOneRequiredWithoutAnswersInput {
  create: PlayerCreateWithoutAnswersInput
  update: PlayerUpdateWithoutAnswersDataInput
  upsert: PlayerUpsertWithoutAnswersInput
  connect: PlayerWhereUniqueInput
}

input PlayerUpdateWithoutAnswersDataInput {
  name: String
  game: GameUpdateOneRequiredWithoutPlayersInput
  score: Int
  responseTime: Int
}

input PlayerUpdateWithoutGameDataInput {
  name: String
  score: Int
  responseTime: Int
  answers: AnswerUpdateManyWithoutPlayerInput
}

input PlayerUpdateWithWhereUniqueWithoutGameInput {
  where: PlayerWhereUniqueInput!
  data: PlayerUpdateWithoutGameDataInput!
}

input PlayerUpsertWithoutAnswersInput {
  update: PlayerUpdateWithoutAnswersDataInput!
  create: PlayerCreateWithoutAnswersInput!
}

input PlayerUpsertWithWhereUniqueWithoutGameInput {
  where: PlayerWhereUniqueInput!
  update: PlayerUpdateWithoutGameDataInput!
  create: PlayerCreateWithoutGameInput!
}

input PlayerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  game: GameWhereInput
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  responseTime: Int
  responseTime_not: Int
  responseTime_in: [Int!]
  responseTime_not_in: [Int!]
  responseTime_lt: Int
  responseTime_lte: Int
  responseTime_gt: Int
  responseTime_gte: Int
  answers_every: AnswerWhereInput
  answers_some: AnswerWhereInput
  answers_none: AnswerWhereInput
  AND: [PlayerWhereInput!]
  OR: [PlayerWhereInput!]
  NOT: [PlayerWhereInput!]
}

input PlayerWhereUniqueInput {
  id: ID
}

type Query {
  answer(where: AnswerWhereUniqueInput!): Answer
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer]!
  answersConnection(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnswerConnection!
  choice(where: ChoiceWhereUniqueInput!): Choice
  choices(where: ChoiceWhereInput, orderBy: ChoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Choice]!
  choicesConnection(where: ChoiceWhereInput, orderBy: ChoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChoiceConnection!
  game(where: GameWhereUniqueInput!): Game
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game]!
  gamesConnection(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameConnection!
  player(where: PlayerWhereUniqueInput!): Player
  players(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player]!
  playersConnection(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlayerConnection!
  question(where: QuestionWhereUniqueInput!): Question
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Question {
  id: ID!
  duration: Int!
  title: String!
  choices(where: ChoiceWhereInput, orderBy: ChoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Choice!]
  goodChoice: Choice
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer!]
  order: Int!
  user: User!
  game: Game!
  launched: DateTime
}

type QuestionConnection {
  pageInfo: PageInfo!
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  id: ID
  duration: Int!
  title: String!
  choices: ChoiceCreateManyWithoutQuestionInput
  goodChoice: ChoiceCreateOneInput
  answers: AnswerCreateManyInput
  order: Int!
  user: UserCreateOneWithoutQuestionsInput!
  game: GameCreateOneWithoutQuestionsInput!
  launched: DateTime
}

input QuestionCreateManyWithoutGameInput {
  create: [QuestionCreateWithoutGameInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutUserInput {
  create: [QuestionCreateWithoutUserInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateOneInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateOneWithoutChoicesInput {
  create: QuestionCreateWithoutChoicesInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateWithoutChoicesInput {
  id: ID
  duration: Int!
  title: String!
  goodChoice: ChoiceCreateOneInput
  answers: AnswerCreateManyInput
  order: Int!
  user: UserCreateOneWithoutQuestionsInput!
  game: GameCreateOneWithoutQuestionsInput!
  launched: DateTime
}

input QuestionCreateWithoutGameInput {
  id: ID
  duration: Int!
  title: String!
  choices: ChoiceCreateManyWithoutQuestionInput
  goodChoice: ChoiceCreateOneInput
  answers: AnswerCreateManyInput
  order: Int!
  user: UserCreateOneWithoutQuestionsInput!
  launched: DateTime
}

input QuestionCreateWithoutUserInput {
  id: ID
  duration: Int!
  title: String!
  choices: ChoiceCreateManyWithoutQuestionInput
  goodChoice: ChoiceCreateOneInput
  answers: AnswerCreateManyInput
  order: Int!
  game: GameCreateOneWithoutQuestionsInput!
  launched: DateTime
}

type QuestionEdge {
  node: Question!
  cursor: String!
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  duration_ASC
  duration_DESC
  title_ASC
  title_DESC
  order_ASC
  order_DESC
  launched_ASC
  launched_DESC
}

type QuestionPreviousValues {
  id: ID!
  duration: Int!
  title: String!
  order: Int!
  launched: DateTime
}

input QuestionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  launched: DateTime
  launched_not: DateTime
  launched_in: [DateTime!]
  launched_not_in: [DateTime!]
  launched_lt: DateTime
  launched_lte: DateTime
  launched_gt: DateTime
  launched_gte: DateTime
  AND: [QuestionScalarWhereInput!]
  OR: [QuestionScalarWhereInput!]
  NOT: [QuestionScalarWhereInput!]
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
  AND: [QuestionSubscriptionWhereInput!]
  OR: [QuestionSubscriptionWhereInput!]
  NOT: [QuestionSubscriptionWhereInput!]
}

input QuestionUpdateDataInput {
  duration: Int
  title: String
  choices: ChoiceUpdateManyWithoutQuestionInput
  goodChoice: ChoiceUpdateOneInput
  answers: AnswerUpdateManyInput
  order: Int
  user: UserUpdateOneRequiredWithoutQuestionsInput
  game: GameUpdateOneRequiredWithoutQuestionsInput
  launched: DateTime
}

input QuestionUpdateInput {
  duration: Int
  title: String
  choices: ChoiceUpdateManyWithoutQuestionInput
  goodChoice: ChoiceUpdateOneInput
  answers: AnswerUpdateManyInput
  order: Int
  user: UserUpdateOneRequiredWithoutQuestionsInput
  game: GameUpdateOneRequiredWithoutQuestionsInput
  launched: DateTime
}

input QuestionUpdateManyDataInput {
  duration: Int
  title: String
  order: Int
  launched: DateTime
}

input QuestionUpdateManyMutationInput {
  duration: Int
  title: String
  order: Int
  launched: DateTime
}

input QuestionUpdateManyWithoutGameInput {
  create: [QuestionCreateWithoutGameInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutGameInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutGameInput!]
  deleteMany: [QuestionScalarWhereInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
}

input QuestionUpdateManyWithoutUserInput {
  create: [QuestionCreateWithoutUserInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [QuestionScalarWhereInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
}

input QuestionUpdateManyWithWhereNestedInput {
  where: QuestionScalarWhereInput!
  data: QuestionUpdateManyDataInput!
}

input QuestionUpdateOneInput {
  create: QuestionCreateInput
  update: QuestionUpdateDataInput
  upsert: QuestionUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: QuestionWhereUniqueInput
}

input QuestionUpdateOneRequiredWithoutChoicesInput {
  create: QuestionCreateWithoutChoicesInput
  update: QuestionUpdateWithoutChoicesDataInput
  upsert: QuestionUpsertWithoutChoicesInput
  connect: QuestionWhereUniqueInput
}

input QuestionUpdateWithoutChoicesDataInput {
  duration: Int
  title: String
  goodChoice: ChoiceUpdateOneInput
  answers: AnswerUpdateManyInput
  order: Int
  user: UserUpdateOneRequiredWithoutQuestionsInput
  game: GameUpdateOneRequiredWithoutQuestionsInput
  launched: DateTime
}

input QuestionUpdateWithoutGameDataInput {
  duration: Int
  title: String
  choices: ChoiceUpdateManyWithoutQuestionInput
  goodChoice: ChoiceUpdateOneInput
  answers: AnswerUpdateManyInput
  order: Int
  user: UserUpdateOneRequiredWithoutQuestionsInput
  launched: DateTime
}

input QuestionUpdateWithoutUserDataInput {
  duration: Int
  title: String
  choices: ChoiceUpdateManyWithoutQuestionInput
  goodChoice: ChoiceUpdateOneInput
  answers: AnswerUpdateManyInput
  order: Int
  game: GameUpdateOneRequiredWithoutQuestionsInput
  launched: DateTime
}

input QuestionUpdateWithWhereUniqueWithoutGameInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutGameDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutUserInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutUserDataInput!
}

input QuestionUpsertNestedInput {
  update: QuestionUpdateDataInput!
  create: QuestionCreateInput!
}

input QuestionUpsertWithoutChoicesInput {
  update: QuestionUpdateWithoutChoicesDataInput!
  create: QuestionCreateWithoutChoicesInput!
}

input QuestionUpsertWithWhereUniqueWithoutGameInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutGameDataInput!
  create: QuestionCreateWithoutGameInput!
}

input QuestionUpsertWithWhereUniqueWithoutUserInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutUserDataInput!
  create: QuestionCreateWithoutUserInput!
}

input QuestionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  choices_every: ChoiceWhereInput
  choices_some: ChoiceWhereInput
  choices_none: ChoiceWhereInput
  goodChoice: ChoiceWhereInput
  answers_every: AnswerWhereInput
  answers_some: AnswerWhereInput
  answers_none: AnswerWhereInput
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  user: UserWhereInput
  game: GameWhereInput
  launched: DateTime
  launched_not: DateTime
  launched_in: [DateTime!]
  launched_not_in: [DateTime!]
  launched_lt: DateTime
  launched_lte: DateTime
  launched_gt: DateTime
  launched_gte: DateTime
  AND: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
}

input QuestionWhereUniqueInput {
  id: ID
}

type Subscription {
  answer(where: AnswerSubscriptionWhereInput): AnswerSubscriptionPayload
  choice(where: ChoiceSubscriptionWhereInput): ChoiceSubscriptionPayload
  game(where: GameSubscriptionWhereInput): GameSubscriptionPayload
  player(where: PlayerSubscriptionWhereInput): PlayerSubscriptionPayload
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  password: String!
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]
  choices(where: ChoiceWhereInput, orderBy: ChoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Choice!]
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  games: GameCreateManyWithoutUserInput
  choices: ChoiceCreateManyWithoutUserInput
  questions: QuestionCreateManyWithoutUserInput
}

input UserCreateOneWithoutChoicesInput {
  create: UserCreateWithoutChoicesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutGamesInput {
  create: UserCreateWithoutGamesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuestionsInput {
  create: UserCreateWithoutQuestionsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutChoicesInput {
  id: ID
  email: String!
  password: String!
  games: GameCreateManyWithoutUserInput
  questions: QuestionCreateManyWithoutUserInput
}

input UserCreateWithoutGamesInput {
  id: ID
  email: String!
  password: String!
  choices: ChoiceCreateManyWithoutUserInput
  questions: QuestionCreateManyWithoutUserInput
}

input UserCreateWithoutQuestionsInput {
  id: ID
  email: String!
  password: String!
  games: GameCreateManyWithoutUserInput
  choices: ChoiceCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  games: GameUpdateManyWithoutUserInput
  choices: ChoiceUpdateManyWithoutUserInput
  questions: QuestionUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutChoicesInput {
  create: UserCreateWithoutChoicesInput
  update: UserUpdateWithoutChoicesDataInput
  upsert: UserUpsertWithoutChoicesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutGamesInput {
  create: UserCreateWithoutGamesInput
  update: UserUpdateWithoutGamesDataInput
  upsert: UserUpsertWithoutGamesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutQuestionsInput {
  create: UserCreateWithoutQuestionsInput
  update: UserUpdateWithoutQuestionsDataInput
  upsert: UserUpsertWithoutQuestionsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutChoicesDataInput {
  email: String
  password: String
  games: GameUpdateManyWithoutUserInput
  questions: QuestionUpdateManyWithoutUserInput
}

input UserUpdateWithoutGamesDataInput {
  email: String
  password: String
  choices: ChoiceUpdateManyWithoutUserInput
  questions: QuestionUpdateManyWithoutUserInput
}

input UserUpdateWithoutQuestionsDataInput {
  email: String
  password: String
  games: GameUpdateManyWithoutUserInput
  choices: ChoiceUpdateManyWithoutUserInput
}

input UserUpsertWithoutChoicesInput {
  update: UserUpdateWithoutChoicesDataInput!
  create: UserCreateWithoutChoicesInput!
}

input UserUpsertWithoutGamesInput {
  update: UserUpdateWithoutGamesDataInput!
  create: UserCreateWithoutGamesInput!
}

input UserUpsertWithoutQuestionsInput {
  update: UserUpdateWithoutQuestionsDataInput!
  create: UserCreateWithoutQuestionsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  games_every: GameWhereInput
  games_some: GameWhereInput
  games_none: GameWhereInput
  choices_every: ChoiceWhereInput
  choices_some: ChoiceWhereInput
  choices_none: ChoiceWhereInput
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    